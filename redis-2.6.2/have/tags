!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A0	rand.c	58;"	d	file:
A1	rand.c	59;"	d	file:
A2	rand.c	60;"	d	file:
ADDEQU	rand.c	54;"	d	file:
AL_START_HEAD	adlist.h	90;"	d
AL_START_TAIL	adlist.h	91;"	d
AVOID_ERRNO	lzfP.h	100;"	d
BIG_ENDIAN	config.h	117;"	d
BIG_ENDIAN	config.h	151;"	d
BYTE_ORDER	config.h	124;"	d
BYTE_ORDER	config.h	134;"	d
BYTE_ORDER	config.h	154;"	d
BYTE_ORDER	config.h	156;"	d
C	rand.c	61;"	d	file:
CARRY	rand.c	53;"	d	file:
CHECK_INPUT	lzfP.h	121;"	d
DICT_ERR	dict.h	42;"	d
DICT_HT_INITIAL_SIZE	dict.h	95;"	d
DICT_NOTUSED	dict.h	45;"	d
DICT_OK	dict.h	41;"	d
FRST	lzf_c.c	53;"	d	file:
GNUC_VERSION	config.h	173;"	d
HAVE_ATOMIC	config.h	175;"	d
HAVE_BACKTRACE	config.h	58;"	d
HAVE_EPOLL	config.h	63;"	d
HAVE_EVPORT	config.h	73;"	d
HAVE_KQUEUE	config.h	67;"	d
HAVE_MALLOC_SIZE	zmalloc.h	42;"	d
HAVE_MALLOC_SIZE	zmalloc.h	52;"	d
HAVE_MALLOC_SIZE	zmalloc.h	60;"	d
HAVE_PROCFS	config.h	48;"	d
HAVE_SYNC_FILE_RANGE	config.h	91;"	d
HAVE_SYNC_FILE_RANGE	config.h	95;"	d
HAVE_TASKINFO	config.h	53;"	d
HIGH	rand.c	50;"	d	file:
HI_BIT	rand.c	67;"	d	file:
HLOG	lzfP.h	55;"	d
HSIZE	lzf_c.c	44;"	d	file:
IDX	lzf_c.c	56;"	d	file:
IDX	lzf_c.c	58;"	d	file:
IDX	lzf_c.c	60;"	d	file:
INIT_HTAB	lzfP.h	91;"	d
INT24_MAX	ziplist.c	159;"	d	file:
INT24_MIN	ziplist.c	160;"	d	file:
INTSET_ENC_INT16	intset.c	46;"	d	file:
INTSET_ENC_INT32	intset.c	47;"	d	file:
INTSET_ENC_INT64	intset.c	48;"	d	file:
LITTLE_ENDIAN	config.h	116;"	d
LITTLE_ENDIAN	config.h	148;"	d
LOW	rand.c	49;"	d	file:
LZFP_h	lzfP.h	38;"	d
LZF_H	lzf.h	38;"	d
LZF_STATE	lzfP.h	/^typedef const u8 *LZF_STATE[1 << (HLOG)];$/;"	t
LZF_STATE_ARG	lzfP.h	109;"	d
LZF_VERSION	lzf.h	49;"	d
MASK	rand.c	48;"	d	file:
MAX_LIT	lzf_c.c	79;"	d	file:
MAX_OFF	lzf_c.c	80;"	d	file:
MAX_REF	lzf_c.c	81;"	d	file:
MEMTEST_32BIT	memtest.c	41;"	d	file:
MEMTEST_64BIT	memtest.c	43;"	d	file:
MUL	rand.c	51;"	d	file:
N	rand.c	47;"	d	file:
NEXT	lzf_c.c	54;"	d	file:
PDP_ENDIAN	config.h	118;"	d
PREFIX_SIZE	zmalloc.c	48;"	d	file:
PREFIX_SIZE	zmalloc.c	51;"	d	file:
PREFIX_SIZE	zmalloc.c	53;"	d	file:
R0	sha1.c	49;"	d	file:
R1	sha1.c	50;"	d	file:
R2	sha1.c	51;"	d	file:
R3	sha1.c	52;"	d	file:
R4	sha1.c	53;"	d	file:
REDIS_GIT_DIRTY	release.h	2;"	d
REDIS_GIT_SHA1	release.h	1;"	d
REDIS_LRAND48_MAX	rand.h	36;"	d
REDIS_RANDOM_H	rand.h	31;"	d
REDIS_VERSION	version.h	1;"	d
REST	rand.c	65;"	d	file:
SDS_MAX_PREALLOC	sds.h	36;"	d
SEED	rand.c	64;"	d	file:
SET3	rand.c	62;"	d	file:
SETLOW	rand.c	63;"	d	file:
SET_ERRNO	lzf_d.c	45;"	d	file:
SET_ERRNO	lzf_d.c	48;"	d	file:
SHA1Final	sha1.c	/^void SHA1Final(unsigned char digest[20], SHA1_CTX* context)$/;"	f
SHA1HANDSOFF	sha1.c	22;"	d	file:
SHA1Init	sha1.c	/^void SHA1Init(SHA1_CTX* context)$/;"	f
SHA1Transform	sha1.c	/^void SHA1Transform(u_int32_t state[5], const unsigned char buffer[64])$/;"	f
SHA1Update	sha1.c	/^void SHA1Update(SHA1_CTX* context, const unsigned char* data, u_int32_t len)$/;"	f
SHA1_CTX	sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:__anon2
STANDALONE	lzfP.h	40;"	d
STRICT_ALIGN	lzfP.h	139;"	d
STRICT_ALIGN	lzfP.h	140;"	d
STRICT_ALIGN	lzfP.h	82;"	d
SWAPINIT	pqsort.c	77;"	d	file:
ULONG_ONEZERO	memtest.c	49;"	d	file:
ULONG_ONEZERO	memtest.c	52;"	d	file:
ULONG_ZEROONE	memtest.c	50;"	d	file:
ULONG_ZEROONE	memtest.c	53;"	d	file:
ULTRA_FAST	lzfP.h	75;"	d
VERY_FAST	lzfP.h	146;"	d
VERY_FAST	lzfP.h	64;"	d
X0	rand.c	55;"	d	file:
X1	rand.c	56;"	d	file:
X2	rand.c	57;"	d	file:
ZIPLIST_BYTES	ziplist.c	166;"	d	file:
ZIPLIST_ENTRY_END	ziplist.c	172;"	d	file:
ZIPLIST_ENTRY_HEAD	ziplist.c	170;"	d	file:
ZIPLIST_ENTRY_TAIL	ziplist.c	171;"	d	file:
ZIPLIST_HEAD	ziplist.h	31;"	d
ZIPLIST_HEADER_SIZE	ziplist.c	169;"	d	file:
ZIPLIST_INCR_LENGTH	ziplist.c	176;"	d	file:
ZIPLIST_LENGTH	ziplist.c	168;"	d	file:
ZIPLIST_TAIL	ziplist.h	32;"	d
ZIPLIST_TAIL_OFFSET	ziplist.c	167;"	d	file:
ZIPMAP_BIGLEN	zipmap.c	100;"	d	file:
ZIPMAP_END	zipmap.c	101;"	d	file:
ZIPMAP_LEN_BYTES	zipmap.c	110;"	d	file:
ZIPMAP_VALUE_MAX_FREE	zipmap.c	105;"	d	file:
ZIP_BIGLEN	ziplist.c	140;"	d	file:
ZIP_DECODE_LENGTH	ziplist.c	255;"	d	file:
ZIP_DECODE_PREVLEN	ziplist.c	318;"	d	file:
ZIP_DECODE_PREVLENSIZE	ziplist.c	308;"	d	file:
ZIP_END	ziplist.c	139;"	d	file:
ZIP_ENTRY_ENCODING	ziplist.c	196;"	d	file:
ZIP_INT_16B	ziplist.c	148;"	d	file:
ZIP_INT_24B	ziplist.c	151;"	d	file:
ZIP_INT_32B	ziplist.c	149;"	d	file:
ZIP_INT_64B	ziplist.c	150;"	d	file:
ZIP_INT_8B	ziplist.c	152;"	d	file:
ZIP_INT_IMM_MASK	ziplist.c	154;"	d	file:
ZIP_INT_IMM_MAX	ziplist.c	156;"	d	file:
ZIP_INT_IMM_MIN	ziplist.c	155;"	d	file:
ZIP_INT_IMM_VAL	ziplist.c	157;"	d	file:
ZIP_INT_MASK	ziplist.c	144;"	d	file:
ZIP_IS_STR	ziplist.c	163;"	d	file:
ZIP_STR_06B	ziplist.c	145;"	d	file:
ZIP_STR_14B	ziplist.c	146;"	d	file:
ZIP_STR_32B	ziplist.c	147;"	d	file:
ZIP_STR_MASK	ziplist.c	143;"	d	file:
ZMALLOC_LIB	zmalloc.h	39;"	d
ZMALLOC_LIB	zmalloc.h	49;"	d
ZMALLOC_LIB	zmalloc.h	65;"	d
_BSD_SOURCE	fmacros.h	35;"	d
_FILE_OFFSET_BITS	fmacros.h	48;"	d
_GNU_SOURCE	fmacros.h	38;"	d
_LARGEFILE_SOURCE	fmacros.h	47;"	d
_REDIS_FMACRO_H	fmacros.h	33;"	d
_XOPEN_SOURCE	fmacros.h	42;"	d
_XOPEN_SOURCE	fmacros.h	44;"	d
_ZIPMAP_H	zipmap.h	36;"	d
__ADLIST_H__	adlist.h	32;"	d
__CONFIG_H	config.h	31;"	d
__DICT_H	dict.h	39;"	d
__ENDIANCONV_H	endianconv.h	34;"	d
__INTSET_H	intset.h	32;"	d
__PQSORT_H	pqsort.h	34;"	d
__REDIS_HELP_H	help.h	4;"	d
__REDIS_UTIL_H	util.h	31;"	d
__SDS_H	sds.h	34;"	d
__TESTHELP_H	testhelp.h	40;"	d
__ZMALLOC_H	zmalloc.h	32;"	d
__failed_tests	testhelp.h	/^int __failed_tests = 0;$/;"	v
__str	zmalloc.h	36;"	d
__test_num	testhelp.h	/^int __test_num = 0;$/;"	v
__xstr	zmalloc.h	35;"	d
__ziplistCascadeUpdate	ziplist.c	/^static unsigned char *__ziplistCascadeUpdate(unsigned char *zl, unsigned char *p) {$/;"	f	file:
__ziplistDelete	ziplist.c	/^static unsigned char *__ziplistDelete(unsigned char *zl, unsigned char *p, unsigned int num) {$/;"	f	file:
__ziplistInsert	ziplist.c	/^static unsigned char *__ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f	file:
_assert	intset.c	/^void _assert(char *estr, char *file, int line) {$/;"	f
_dictClear	dict.c	/^int _dictClear(dict *d, dictht *ht)$/;"	f
_dictExpandIfNeeded	dict.c	/^static int _dictExpandIfNeeded(dict *d)$/;"	f	file:
_dictInit	dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f
_dictKeyIndex	dict.c	/^static int _dictKeyIndex(dict *d, const void *key)$/;"	f	file:
_dictNextPower	dict.c	/^static unsigned long _dictNextPower(unsigned long size)$/;"	f	file:
_dictRehashStep	dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	file:
_dictReset	dict.c	/^static void _dictReset(dictht *ht)$/;"	f	file:
_intsetGet	intset.c	/^static int64_t _intsetGet(intset *is, int pos) {$/;"	f	file:
_intsetGetEncoded	intset.c	/^static int64_t _intsetGetEncoded(intset *is, int pos, uint8_t enc) {$/;"	f	file:
_intsetSet	intset.c	/^static void _intsetSet(intset *is, int pos, int64_t value) {$/;"	f	file:
_intsetValueEncoding	intset.c	/^static uint8_t _intsetValueEncoding(int64_t v) {$/;"	f	file:
_pqsort	pqsort.c	/^_pqsort(void *a, size_t n, size_t es,$/;"	f	file:
a	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
aof_fsync	config.h	79;"	d
aof_fsync	config.h	81;"	d
appendServerSaveParams	config.c	/^void appendServerSaveParams(time_t seconds, int changes) {$/;"	f
ascii_logo	asciilogo.h	/^char *ascii_logo =$/;"	v
assert	intset.c	331;"	d	file:
blk	sha1.c	45;"	d	file:
blk0	sha1.c	38;"	d	file:
blk0	sha1.c	41;"	d	file:
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr
buffer	sha1.h	/^    unsigned char buffer[64];$/;"	m	struct:__anon2
c	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
calloc	zmalloc.c	60;"	d	file:
calloc	zmalloc.c	65;"	d	file:
checkConsistency	intset.c	/^void checkConsistency(intset *is) {$/;"	f
commandGroups	help.h	/^static char *commandGroups[] = {$/;"	v
commandHelp	help.h	/^struct commandHelp {$/;"	s
commandHelp	help.h	/^} commandHelp[] = {$/;"	v	typeref:struct:commandHelp
configCommand	config.c	/^void configCommand(redisClient *c) {$/;"	f
configGetCommand	config.c	/^void configGetCommand(redisClient *c) {$/;"	f
configSetCommand	config.c	/^void configSetCommand(redisClient *c) {$/;"	f
config_get_bool_field	config.c	767;"	d	file:
config_get_numerical_field	config.c	775;"	d	file:
config_get_string_field	config.c	759;"	d	file:
contents	intset.h	/^    int8_t contents[];$/;"	m	struct:intset
count	sha1.h	/^    u_int32_t count[2];$/;"	m	struct:__anon2
crc64	crc64.c	/^uint64_t crc64(uint64_t crc, const unsigned char *s, uint64_t l) {$/;"	f
crc64_tab	crc64.c	/^static const uint64_t crc64_tab[256] = {$/;"	v	file:
createIntList	ziplist.c	/^unsigned char *createIntList() {$/;"	f
createList	ziplist.c	/^unsigned char *createList() {$/;"	f
createSet	intset.c	/^intset *createSet(int bits, int size) {$/;"	f
d	dict.h	/^    dict *d;$/;"	m	struct:dictIterator
d2string	util.c	/^int d2string(char *buf, size_t len, double value) {$/;"	f
debug	ziplist.c	988;"	d	file:
dict	dict.h	/^typedef struct dict {$/;"	s
dict	dict.h	/^} dict;$/;"	t	typeref:struct:dict
dictAdd	dict.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f
dictAddRaw	dict.c	/^dictEntry *dictAddRaw(dict *d, void *key)$/;"	f
dictCompareKeys	dict.h	126;"	d
dictCreate	dict.c	/^dict *dictCreate(dictType *type,$/;"	f
dictDelete	dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f
dictDeleteNoFree	dict.c	/^int dictDeleteNoFree(dict *ht, const void *key) {$/;"	f
dictDisableResize	dict.c	/^void dictDisableResize(void) {$/;"	f
dictEmpty	dict.c	/^void dictEmpty(dict *d) {$/;"	f
dictEnableResize	dict.c	/^void dictEnableResize(void) {$/;"	f
dictEntry	dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictExpand	dict.c	/^int dictExpand(dict *d, unsigned long size)$/;"	f
dictFetchValue	dict.c	/^void *dictFetchValue(dict *d, const void *key) {$/;"	f
dictFind	dict.c	/^dictEntry *dictFind(dict *d, const void *key)$/;"	f
dictFreeKey	dict.h	115;"	d
dictFreeVal	dict.h	98;"	d
dictGenCaseHashFunction	dict.c	/^unsigned int dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenHashFunction	dict.c	/^unsigned int dictGenHashFunction(const void *key, int len) {$/;"	f
dictGenericDelete	dict.c	/^static int dictGenericDelete(dict *d, const void *key, int nofree)$/;"	f	file:
dictGetHashFunctionSeed	dict.c	/^uint32_t dictGetHashFunctionSeed(void) {$/;"	f
dictGetIterator	dict.c	/^dictIterator *dictGetIterator(dict *d)$/;"	f
dictGetKey	dict.h	132;"	d
dictGetRandomKey	dict.c	/^dictEntry *dictGetRandomKey(dict *d)$/;"	f
dictGetSafeIterator	dict.c	/^dictIterator *dictGetSafeIterator(dict *d) {$/;"	f
dictGetSignedIntegerVal	dict.h	134;"	d
dictGetUnsignedIntegerVal	dict.h	135;"	d
dictGetVal	dict.h	133;"	d
dictHashKey	dict.h	131;"	d
dictIdentityHashFunction	dict.c	/^unsigned int dictIdentityHashFunction(unsigned int key)$/;"	f
dictIntHashFunction	dict.c	/^unsigned int dictIntHashFunction(unsigned int key)$/;"	f
dictIsRehashing	dict.h	138;"	d
dictIterator	dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictNext	dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f
dictRehash	dict.c	/^int dictRehash(dict *d, int n) {$/;"	f
dictRehashMilliseconds	dict.c	/^int dictRehashMilliseconds(dict *d, int ms) {$/;"	f
dictRelease	dict.c	/^void dictRelease(dict *d)$/;"	f
dictReleaseIterator	dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f
dictReplace	dict.c	/^int dictReplace(dict *d, void *key, void *val)$/;"	f
dictReplaceRaw	dict.c	/^dictEntry *dictReplaceRaw(dict *d, void *key) {$/;"	f
dictResize	dict.c	/^int dictResize(dict *d)$/;"	f
dictSetHashFunctionSeed	dict.c	/^void dictSetHashFunctionSeed(uint32_t seed) {$/;"	f
dictSetKey	dict.h	119;"	d
dictSetSignedIntegerVal	dict.h	109;"	d
dictSetUnsignedIntegerVal	dict.h	112;"	d
dictSetVal	dict.h	102;"	d
dictSize	dict.h	137;"	d
dictSlots	dict.h	136;"	d
dictType	dict.h	/^typedef struct dictType {$/;"	s
dictType	dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dict_can_resize	dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_force_resize_ratio	dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
dict_hash_function_seed	dict.c	/^static uint32_t dict_hash_function_seed = 5381;$/;"	v	file:
dictht	dict.h	/^typedef struct dictht {$/;"	s
dictht	dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
direction	adlist.h	/^    int direction; \/\/迭代方向 0向后，1向前$/;"	m	struct:listIter
dup	adlist.h	/^    void *(*dup)(void *ptr);\/\/函数指针-复制$/;"	m	struct:list
encoding	intset.h	/^    uint32_t encoding;\/\/编码格式$/;"	m	struct:intset
encoding	ziplist.c	/^    unsigned char encoding;$/;"	m	struct:zlentry	file:
entry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
error	intset.c	/^void error(char *err) {$/;"	f
evalCommand	scripting.c	/^void evalCommand(redisClient *c) {$/;"	f
evalGenericCommand	scripting.c	/^void evalGenericCommand(redisClient *c, int evalsha) {$/;"	f
evalShaCommand	scripting.c	/^void evalShaCommand(redisClient *c) {$/;"	f
expect	lzf_c.c	84;"	d	file:
expect	lzf_c.c	87;"	d	file:
expect_false	lzf_c.c	91;"	d	file:
expect_true	lzf_c.c	92;"	d	file:
free	adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list
free	sds.h	/^    int free;$/;"	m	struct:sdshdr
free	zmalloc.c	62;"	d	file:
free	zmalloc.c	67;"	d	file:
getRandomHexChars	util.c	/^void getRandomHexChars(char *p, unsigned int len) {$/;"	f
group	help.h	/^  int group;$/;"	m	struct:commandHelp
hashFunction	dict.h	/^    unsigned int (*hashFunction)(const void *key); \/\/hash函数指针$/;"	m	struct:dictType
head	adlist.h	/^    listNode *head;$/;"	m	struct:list
headersize	ziplist.c	/^    unsigned int headersize;$/;"	m	struct:zlentry	file:
hex_digit_to_int	sds.c	/^int hex_digit_to_int(char c) {$/;"	f
ht	dict.h	/^    dictht ht[2]; \/\/2个hash表 ht[1]进行resize时使用$/;"	m	struct:dict
index	dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
inline	lzf_c.c	85;"	d	file:
inline	lzf_c.c	88;"	d	file:
intrev16	endianconv.c	/^uint16_t intrev16(uint16_t v) {$/;"	f
intrev16ifbe	endianconv.h	52;"	d
intrev16ifbe	endianconv.h	59;"	d
intrev32	endianconv.c	/^uint32_t intrev32(uint32_t v) {$/;"	f
intrev32ifbe	endianconv.h	53;"	d
intrev32ifbe	endianconv.h	60;"	d
intrev64	endianconv.c	/^uint64_t intrev64(uint64_t v) {$/;"	f
intrev64ifbe	endianconv.h	54;"	d
intrev64ifbe	endianconv.h	61;"	d
intset	intset.h	/^typedef struct intset {$/;"	s
intset	intset.h	/^} intset;$/;"	t	typeref:struct:intset
intsetAdd	intset.c	/^intset *intsetAdd(intset *is, int64_t value, uint8_t *success) {$/;"	f
intsetBlobLen	intset.c	/^size_t intsetBlobLen(intset *is) {$/;"	f
intsetFind	intset.c	/^uint8_t intsetFind(intset *is, int64_t value) {$/;"	f
intsetGet	intset.c	/^uint8_t intsetGet(intset *is, uint32_t pos, int64_t *value) {$/;"	f
intsetLen	intset.c	/^uint32_t intsetLen(intset *is) {$/;"	f
intsetMoveTail	intset.c	/^static void intsetMoveTail(intset *is, uint32_t from, uint32_t to) {$/;"	f	file:
intsetNew	intset.c	/^intset *intsetNew(void) {$/;"	f
intsetRandom	intset.c	/^int64_t intsetRandom(intset *is) {$/;"	f
intsetRemove	intset.c	/^intset *intsetRemove(intset *is, int64_t value, int *success) {$/;"	f
intsetRepr	intset.c	/^void intsetRepr(intset *is) {$/;"	f
intsetResize	intset.c	/^static intset *intsetResize(intset *is, uint32_t len) {$/;"	f	file:
intsetSearch	intset.c	/^static uint8_t intsetSearch(intset *is, int64_t value, uint32_t *pos) {$/;"	f	file:
intsetUpgradeAndAdd	intset.c	/^static intset *intsetUpgradeAndAdd(intset *is, int64_t value) {$/;"	f	file:
is_hex_digit	sds.c	/^int is_hex_digit(char c) {$/;"	f
isfinite	solarisfixes.h	40;"	d
isfinite	solarisfixes.h	41;"	d
isinf	solarisfixes.h	45;"	d
isinf	solarisfixes.h	46;"	d
isnan	solarisfixes.h	35;"	d
isnan	solarisfixes.h	36;"	d
iterators	dict.h	/^    int iterators; \/* number of iterators currently running *\/$/;"	m	struct:dict
key	dict.h	/^    void *key;$/;"	m	struct:dictEntry
keyCompare	dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2); \/\/key比较函数指针$/;"	m	struct:dictType
keyDestructor	dict.h	/^    void (*keyDestructor)(void *privdata, void *key); \/\/key构造函数指针$/;"	m	struct:dictType
keyDup	dict.h	/^    void *(*keyDup)(void *privdata, const void *key); \/\/key复制函数指针$/;"	m	struct:dictType
len	adlist.h	/^    unsigned long len;$/;"	m	struct:list
len	sds.h	/^    int len;$/;"	m	struct:sdshdr
len	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:
length	intset.h	/^    uint32_t length; \/\/元素个数$/;"	m	struct:intset
lensize	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:
list	adlist.h	/^typedef struct list {$/;"	s
list	adlist.h	/^} list;$/;"	t	typeref:struct:list
listAddNodeHead	adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f
listAddNodeTail	adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f
listCreate	adlist.c	/^list *listCreate(void)$/;"	f
listDelNode	adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f
listDup	adlist.c	/^list *listDup(list *orig)$/;"	f
listFirst	adlist.h	58;"	d
listGetDupMethod	adlist.h	68;"	d
listGetFree	adlist.h	69;"	d
listGetIterator	adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f
listGetMatchMethod	adlist.h	70;"	d
listIndex	adlist.c	/^listNode *listIndex(list *list, long index) {$/;"	f
listInsertNode	adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f
listIter	adlist.h	/^typedef struct listIter {$/;"	s
listIter	adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listLast	adlist.h	59;"	d
listLength	adlist.h	57;"	d
listNext	adlist.c	/^listNode *listNext(listIter *iter)$/;"	f
listNextNode	adlist.h	61;"	d
listNode	adlist.h	/^typedef struct listNode {$/;"	s
listNode	adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	adlist.h	62;"	d
listPrevNode	adlist.h	60;"	d
listRelease	adlist.c	/^void listRelease(list *list)$/;"	f
listReleaseIterator	adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f
listRewind	adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f
listRewindTail	adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f
listRotate	adlist.c	/^void listRotate(list *list) {$/;"	f
listSearchKey	adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f
listSetDupMethod	adlist.h	64;"	d
listSetFreeMethod	adlist.h	65;"	d
listSetMatchMethod	adlist.h	66;"	d
ll2string	util.c	/^int ll2string(char *s, size_t len, long long value) {$/;"	f
loadServerConfig	config.c	/^void loadServerConfig(char *filename, char *options) {$/;"	f
loadServerConfigFromString	config.c	/^void loadServerConfigFromString(char *config) {$/;"	f
luaCreateFunction	scripting.c	/^int luaCreateFunction(redisClient *c, lua_State *lua, char *funcname, robj *body) {$/;"	f
luaLoadLib	scripting.c	/^void luaLoadLib(lua_State *lua, const char *libname, lua_CFunction luafunc) {$/;"	f
luaLoadLibraries	scripting.c	/^void luaLoadLibraries(lua_State *lua) {$/;"	f
luaLogCommand	scripting.c	/^int luaLogCommand(lua_State *lua) {$/;"	f
luaMaskCountHook	scripting.c	/^void luaMaskCountHook(lua_State *lua, lua_Debug *ar) {$/;"	f
luaPushError	scripting.c	/^void luaPushError(lua_State *lua, char *error) {$/;"	f
luaRedisCallCommand	scripting.c	/^int luaRedisCallCommand(lua_State *lua) {$/;"	f
luaRedisErrorReplyCommand	scripting.c	/^int luaRedisErrorReplyCommand(lua_State *lua) {$/;"	f
luaRedisGenericCommand	scripting.c	/^int luaRedisGenericCommand(lua_State *lua, int raise_error) {$/;"	f
luaRedisPCallCommand	scripting.c	/^int luaRedisPCallCommand(lua_State *lua) {$/;"	f
luaRedisReturnSingleFieldTable	scripting.c	/^int luaRedisReturnSingleFieldTable(lua_State *lua, char *field) {$/;"	f
luaRedisSha1hexCommand	scripting.c	/^int luaRedisSha1hexCommand(lua_State *lua) {$/;"	f
luaRedisStatusReplyCommand	scripting.c	/^int luaRedisStatusReplyCommand(lua_State *lua) {$/;"	f
luaRemoveUnsupportedFunctions	scripting.c	/^void luaRemoveUnsupportedFunctions(lua_State *lua) {$/;"	f
luaReplyToRedisReply	scripting.c	/^void luaReplyToRedisReply(redisClient *c, lua_State *lua) {$/;"	f
luaSetGlobalArray	scripting.c	/^void luaSetGlobalArray(lua_State *lua, char *var, robj **elev, int elec) {$/;"	f
luaSortArray	scripting.c	/^void luaSortArray(lua_State *lua) {$/;"	f
lzf_compress	lzf_c.c	/^lzf_compress (const void *const in_data, unsigned int in_len,$/;"	f
lzf_decompress	lzf_d.c	/^lzf_decompress (const void *const in_data,  unsigned int in_len,$/;"	f
main	crc64.c	/^int main(void) {$/;"	f
main	endianconv.c	/^int main(void) {$/;"	f
main	intset.c	/^int main(int argc, char **argv) {$/;"	f
main	sds.c	/^int main(void) {$/;"	f
main	util.c	/^int main(int argc, char **argv) {$/;"	f
main	ziplist.c	/^int main(int argc, char **argv) {$/;"	f
main	zipmap.c	/^int main(void) {$/;"	f
malloc	zmalloc.c	59;"	d	file:
malloc	zmalloc.c	64;"	d	file:
match	adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list
med3	pqsort.c	/^med3(char *a, char *b, char *c,$/;"	f	file:
memrev16	endianconv.c	/^void memrev16(void *p) {$/;"	f
memrev16ifbe	endianconv.h	49;"	d
memrev16ifbe	endianconv.h	56;"	d
memrev32	endianconv.c	/^void memrev32(void *p) {$/;"	f
memrev32ifbe	endianconv.h	50;"	d
memrev32ifbe	endianconv.h	57;"	d
memrev64	endianconv.c	/^void memrev64(void *p) {$/;"	f
memrev64ifbe	endianconv.h	51;"	d
memrev64ifbe	endianconv.h	58;"	d
memtest	memtest.c	/^void memtest(size_t megabytes, int passes) {$/;"	f
memtest_addressing	memtest.c	/^void memtest_addressing(unsigned long *l, size_t bytes) {$/;"	f
memtest_compare	memtest.c	/^void memtest_compare(unsigned long *l, size_t bytes) {$/;"	f
memtest_compare_times	memtest.c	/^void memtest_compare_times(unsigned long *m, size_t bytes, int pass, int times) {$/;"	f
memtest_fill_random	memtest.c	/^void memtest_fill_random(unsigned long *l, size_t bytes) {$/;"	f
memtest_fill_value	memtest.c	/^void memtest_fill_value(unsigned long *l, size_t bytes, unsigned long v1,$/;"	f
memtest_progress_end	memtest.c	/^void memtest_progress_end(void) {$/;"	f
memtest_progress_start	memtest.c	/^void memtest_progress_start(char *title, int pass) {$/;"	f
memtest_progress_step	memtest.c	/^void memtest_progress_step(size_t curr, size_t size, char c) {$/;"	f
memtest_test	memtest.c	/^void memtest_test(size_t megabytes, int passes) {$/;"	f
memtoll	util.c	/^long long memtoll(const char *p, int *err) {$/;"	f
min	pqsort.c	52;"	d	file:
name	help.h	/^  char *name;$/;"	m	struct:commandHelp
next	adlist.h	/^    listNode *next; \/\/下一个迭代点$/;"	m	struct:listIter
next	adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
next	dict.h	/^    struct dictEntry *next; \/*解决哈希冲突问题（链地址法）*\/$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
next	rand.c	/^static void next() {$/;"	f	file:
nextEntry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
ok	intset.c	/^void ok(void) {$/;"	f
p	ziplist.c	/^    unsigned char *p;$/;"	m	struct:zlentry	file:
params	help.h	/^  char *params;$/;"	m	struct:commandHelp
pop	ziplist.c	/^void pop(unsigned char *zl, int where) {$/;"	f
pqsort	pqsort.c	/^pqsort(void *a, size_t n, size_t es,$/;"	f
prev	adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
prevrawlen	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:
prevrawlensize	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:
privdata	dict.h	/^    void *privdata;$/;"	m	struct:dict
progress_full	memtest.c	/^size_t progress_full; \/* How many chars to write to fill the progress bar. *\/$/;"	v
progress_printed	memtest.c	/^size_t progress_printed; \/* Printed chars in screen-wide progress bar. *\/$/;"	v
randstring	ziplist.c	/^int randstring(char *target, unsigned int min, unsigned int max) {$/;"	f
rdb_fsync_range	config.h	101;"	d
rdb_fsync_range	config.h	103;"	d
realloc	zmalloc.c	61;"	d	file:
realloc	zmalloc.c	66;"	d	file:
redisGitDirty	release.c	/^char *redisGitDirty(void) {$/;"	f
redisGitSHA1	release.c	/^char *redisGitSHA1(void) {$/;"	f
redisLrand48	rand.c	/^int32_t redisLrand48() {$/;"	f
redisProtocolToLuaType	scripting.c	/^char *redisProtocolToLuaType(lua_State *lua, char* reply) {$/;"	f
redisProtocolToLuaType_Bulk	scripting.c	/^char *redisProtocolToLuaType_Bulk(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Error	scripting.c	/^char *redisProtocolToLuaType_Error(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Int	scripting.c	/^char *redisProtocolToLuaType_Int(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_MultiBulk	scripting.c	/^char *redisProtocolToLuaType_MultiBulk(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Status	scripting.c	/^char *redisProtocolToLuaType_Status(lua_State *lua, char *reply) {$/;"	f
redisSrand48	rand.c	/^void redisSrand48(int32_t seedval) {$/;"	f
redis_fstat	config.h	39;"	d
redis_fstat	config.h	42;"	d
redis_math_random	scripting.c	/^int redis_math_random (lua_State *L) {$/;"	f
redis_math_randomseed	scripting.c	/^int redis_math_randomseed (lua_State *L) {$/;"	f
redis_stat	config.h	40;"	d
redis_stat	config.h	43;"	d
rehashidx	dict.h	/^    int rehashidx; \/* rehashing not in progress if rehashidx == -1 *\/$/;"	m	struct:dict
resetServerSaveParams	config.c	/^void resetServerSaveParams() {$/;"	f
rol	sha1.c	33;"	d	file:
s64	dict.h	/^        int64_t s64;$/;"	m	union:dictEntry::__anon1
safe	dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
scriptCommand	scripting.c	/^void scriptCommand(redisClient *c) {$/;"	f
scriptingEnableGlobalsProtection	scripting.c	/^void scriptingEnableGlobalsProtection(lua_State *lua) {$/;"	f
scriptingInit	scripting.c	/^void scriptingInit(void) {$/;"	f
scriptingRelease	scripting.c	/^void scriptingRelease(void) {$/;"	f
scriptingReset	scripting.c	/^void scriptingReset(void) {$/;"	f
sds	sds.h	/^typedef char *sds;$/;"	t
sdsAllocSize	sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f
sdsIncrLen	sds.c	/^void sdsIncrLen(sds s, int incr) {$/;"	f
sdsMakeRoomFor	sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f
sdsRemoveFreeSpace	sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f
sdsavail	sds.h	/^static inline size_t sdsavail(const sds s) { \/\/返回sds 空闲的长度$/;"	f
sdscat	sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatlen	sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f
sdscatsds	sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f
sdscatvprintf	sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdsclear	sds.c	/^void sdsclear(sds s) {$/;"	f
sdscmp	sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f
sdscpy	sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f
sdscpylen	sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f
sdsdup	sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdshdr	sds.h	/^struct sdshdr {$/;"	s
sdslen	sds.h	/^static inline size_t sdslen(const sds s) {  \/\/返回sds 现使用的长度$/;"	f
sdsmapchars	sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f
sdsnew	sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	sds.c	/^sds sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f
sdssplitlen	sds.c	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f
sdstolower	sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsupdatelen	sds.c	/^void sdsupdatelen(sds s) {$/;"	f
sha1hex	scripting.c	/^void sha1hex(char *digest, char *script, size_t len) {$/;"	f
since	help.h	/^  char *since;$/;"	m	struct:commandHelp
size	dict.h	/^    unsigned long size; \/\/指针数组大小$/;"	m	struct:dictht
sizemask	dict.h	/^    unsigned long sizemask;$/;"	m	struct:dictht
state	sha1.h	/^    u_int32_t state[5];$/;"	m	struct:__anon2
stress	ziplist.c	/^void stress(int pos, int num, int maxsize, int dnum) {$/;"	f
string2l	util.c	/^int string2l(const char *s, size_t slen, long *lval) {$/;"	f
string2ll	util.c	/^int string2ll(const char *s, size_t slen, long long *value) {$/;"	f
stringmatch	util.c	/^int stringmatch(const char *pattern, const char *string, int nocase) {$/;"	f
stringmatchlen	util.c	/^int stringmatchlen(const char *pattern, int patternLen,$/;"	f
summary	help.h	/^  char *summary;$/;"	m	struct:commandHelp
swap	pqsort.c	90;"	d	file:
swapcode	pqsort.c	58;"	d	file:
swapfunc	pqsort.c	/^swapfunc(char *a, char *b, size_t n, int swaptype)$/;"	f	file:
table	dict.h	/^    dictEntry **table; \/\/哈希表数据$/;"	m	struct:dictht
table	dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
tail	adlist.h	/^    listNode *tail;\/\/尾节点$/;"	m	struct:list
test_cond	testhelp.h	44;"	d
test_report	testhelp.h	48;"	d
test_string2l	util.c	/^void test_string2l(void) {$/;"	f
test_string2ll	util.c	/^void test_string2ll(void) {$/;"	f
timeInMilliseconds	dict.c	/^long long timeInMilliseconds(void) {$/;"	f
type	dict.h	/^    dictType *type;$/;"	m	struct:dict
u16	lzfP.h	/^    typedef unsigned int u16;$/;"	t
u16	lzfP.h	/^    typedef unsigned short u16;$/;"	t
u64	dict.h	/^        uint64_t u64;$/;"	m	union:dictEntry::__anon1
u8	lzfP.h	/^typedef unsigned char u8;$/;"	t
u_int	solarisfixes.h	50;"	d
u_int32_t	solarisfixes.h	51;"	d
update_zmalloc_stat_add	zmalloc.c	71;"	d	file:
update_zmalloc_stat_add	zmalloc.c	74;"	d	file:
update_zmalloc_stat_alloc	zmalloc.c	88;"	d	file:
update_zmalloc_stat_free	zmalloc.c	98;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	72;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	80;"	d	file:
usec	intset.c	/^long long usec(void) {$/;"	f
usec	ziplist.c	/^long long usec(void) {$/;"	f
used	dict.h	/^    unsigned long used; \/\/指针数组现使用的节点数量$/;"	m	struct:dictht
used_memory	zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory_mutex	zmalloc.c	/^pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
v	dict.h	/^    } v;$/;"	m	struct:dictEntry	typeref:union:dictEntry::__anon1
val	dict.h	/^        void *val;$/;"	m	union:dictEntry::__anon1
valDestructor	dict.h	/^    void (*valDestructor)(void *privdata, void *obj); \/\/value构造函数指针$/;"	m	struct:dictType
valDup	dict.h	/^    void *(*valDup)(void *privdata, const void *obj); \/\/value复制函数指针$/;"	m	struct:dictType
value	adlist.h	/^    void *value;$/;"	m	struct:listNode
vecswap	pqsort.c	98;"	d	file:
verify	ziplist.c	/^void verify(unsigned char *zl, zlentry *e) {$/;"	f
ws	memtest.c	/^static struct winsize ws;$/;"	v	typeref:struct:winsize	file:
x	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
yesnotoi	config.c	/^int yesnotoi(char *s) {$/;"	f
zcalloc	zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f
zfree	zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zipEncodeLength	ziplist.c	/^static unsigned int zipEncodeLength(unsigned char *p, unsigned char encoding, unsigned int rawlen) {$/;"	f	file:
zipEntry	ziplist.c	/^static zlentry zipEntry(unsigned char *p) {$/;"	f	file:
zipIntSize	ziplist.c	/^static unsigned int zipIntSize(unsigned char encoding) {$/;"	f	file:
zipLoadInteger	ziplist.c	/^static int64_t zipLoadInteger(unsigned char *p, unsigned char encoding) {$/;"	f	file:
zipPrevEncodeLength	ziplist.c	/^static unsigned int zipPrevEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:
zipPrevEncodeLengthForceLarge	ziplist.c	/^static void zipPrevEncodeLengthForceLarge(unsigned char *p, unsigned int len) {$/;"	f	file:
zipPrevLenByteDiff	ziplist.c	/^static int zipPrevLenByteDiff(unsigned char *p, unsigned int len) {$/;"	f	file:
zipRawEntryLength	ziplist.c	/^static unsigned int zipRawEntryLength(unsigned char *p) {$/;"	f	file:
zipSaveInteger	ziplist.c	/^static void zipSaveInteger(unsigned char *p, int64_t value, unsigned char encoding) {$/;"	f	file:
zipTryEncoding	ziplist.c	/^static int zipTryEncoding(unsigned char *entry, unsigned int entrylen, long long *v, unsigned char *encoding) {$/;"	f	file:
ziplistBlobLen	ziplist.c	/^size_t ziplistBlobLen(unsigned char *zl) {$/;"	f
ziplistCompare	ziplist.c	/^unsigned int ziplistCompare(unsigned char *p, unsigned char *sstr, unsigned int slen) {$/;"	f
ziplistDelete	ziplist.c	/^unsigned char *ziplistDelete(unsigned char *zl, unsigned char **p) {$/;"	f
ziplistDeleteRange	ziplist.c	/^unsigned char *ziplistDeleteRange(unsigned char *zl, unsigned int index, unsigned int num) {$/;"	f
ziplistFind	ziplist.c	/^unsigned char *ziplistFind(unsigned char *p, unsigned char *vstr, unsigned int vlen, unsigned int skip) {$/;"	f
ziplistGet	ziplist.c	/^unsigned int ziplistGet(unsigned char *p, unsigned char **sstr, unsigned int *slen, long long *sval) {$/;"	f
ziplistIndex	ziplist.c	/^unsigned char *ziplistIndex(unsigned char *zl, int index) {$/;"	f
ziplistInsert	ziplist.c	/^unsigned char *ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f
ziplistLen	ziplist.c	/^unsigned int ziplistLen(unsigned char *zl) {$/;"	f
ziplistNew	ziplist.c	/^unsigned char *ziplistNew(void) {$/;"	f
ziplistNext	ziplist.c	/^unsigned char *ziplistNext(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPrev	ziplist.c	/^unsigned char *ziplistPrev(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPush	ziplist.c	/^unsigned char *ziplistPush(unsigned char *zl, unsigned char *s, unsigned int slen, int where) {$/;"	f
ziplistRepr	ziplist.c	/^void ziplistRepr(unsigned char *zl) {$/;"	f
ziplistResize	ziplist.c	/^static unsigned char *ziplistResize(unsigned char *zl, unsigned int len) {$/;"	f	file:
zipmapBlobLen	zipmap.c	/^size_t zipmapBlobLen(unsigned char *zm) {$/;"	f
zipmapDecodeLength	zipmap.c	/^static unsigned int zipmapDecodeLength(unsigned char *p) {$/;"	f	file:
zipmapDel	zipmap.c	/^unsigned char *zipmapDel(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted) {$/;"	f
zipmapEncodeLength	zipmap.c	/^static unsigned int zipmapEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:
zipmapExists	zipmap.c	/^int zipmapExists(unsigned char *zm, unsigned char *key, unsigned int klen) {$/;"	f
zipmapGet	zipmap.c	/^int zipmapGet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char **value, unsigned int *vlen) {$/;"	f
zipmapLen	zipmap.c	/^unsigned int zipmapLen(unsigned char *zm) {$/;"	f
zipmapLookupRaw	zipmap.c	/^static unsigned char *zipmapLookupRaw(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned int *totlen) {$/;"	f	file:
zipmapNew	zipmap.c	/^unsigned char *zipmapNew(void) {$/;"	f
zipmapNext	zipmap.c	/^unsigned char *zipmapNext(unsigned char *zm, unsigned char **key, unsigned int *klen, unsigned char **value, unsigned int *vlen) {$/;"	f
zipmapRawEntryLength	zipmap.c	/^static unsigned int zipmapRawEntryLength(unsigned char *p) {$/;"	f	file:
zipmapRawKeyLength	zipmap.c	/^static unsigned int zipmapRawKeyLength(unsigned char *p) {$/;"	f	file:
zipmapRawValueLength	zipmap.c	/^static unsigned int zipmapRawValueLength(unsigned char *p) {$/;"	f	file:
zipmapRepr	zipmap.c	/^void zipmapRepr(unsigned char *p) {$/;"	f
zipmapRequiredLength	zipmap.c	/^static unsigned long zipmapRequiredLength(unsigned int klen, unsigned int vlen) {$/;"	f	file:
zipmapResize	zipmap.c	/^static inline unsigned char *zipmapResize(unsigned char *zm, unsigned int len) {$/;"	f	file:
zipmapRewind	zipmap.c	/^unsigned char *zipmapRewind(unsigned char *zm) {$/;"	f
zipmapSet	zipmap.c	/^unsigned char *zipmapSet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char *val, unsigned int vlen, int *update) {$/;"	f
zlentry	ziplist.c	/^typedef struct zlentry {$/;"	s	file:
zlentry	ziplist.c	/^} zlentry;$/;"	t	typeref:struct:zlentry	file:
zlibc_free	zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f
zmalloc	zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc_default_oom	zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:
zmalloc_enable_thread_safeness	zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_get_fragmentation_ratio	zmalloc.c	/^float zmalloc_get_fragmentation_ratio(void) {$/;"	f
zmalloc_get_private_dirty	zmalloc.c	/^size_t zmalloc_get_private_dirty(void) {$/;"	f
zmalloc_get_rss	zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_oom_handler	zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_set_oom_handler	zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f
zmalloc_size	zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f
zmalloc_size	zmalloc.h	43;"	d
zmalloc_size	zmalloc.h	53;"	d
zmalloc_size	zmalloc.h	61;"	d
zmalloc_thread_safe	zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_used_memory	zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zrealloc	zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zstrdup	zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
